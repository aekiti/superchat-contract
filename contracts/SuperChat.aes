include "List.aes"
payable contract SuperChat =

  record user =
    { name  : string,
      about : string,
      image : string,
      owner : address }

  record message =
    { content  : string,
      category : string,
      amount   : int,
      time     : int,
      sender   : address }

  record state =
    { profile       : map(address, user),
      requests      : map(address, list(address)),
      friends       : map(address, list(address)),
      messages      : map(address, map(address, list(message))) }

  stateful entrypoint init() : state =
    { profile       = {},
      requests      = {},
      friends       = {},
      messages      = {} }  

  public stateful entrypoint register_or_update_profile(name': string, about': string, image': string) : user =
    let user_profile : user = { name = name', about = about', image = image', owner = Call.caller }
    put(state{ profile[Call.caller] = user_profile })
    user_profile

  private function empty_profile() : user =
    { name = "", about = "", image = "", owner = Call.caller }

  public entrypoint get_profile() : user =
    Map.lookup_default(Call.caller, state.profile, empty_profile())

  public entrypoint get_all_profile() : map(address, user) =
    require(Map.member(Call.caller, state.profile), abort("Unauthorized Access"))
    state.profile

  public stateful entrypoint send_friend_request(friends_address: address) : list(address) =
    let empty_address_list : list(address) = [Call.caller]

    switch(Map.lookup(friends_address, state.requests))
      None    =>   only_one_friend_request(friends_address, empty_address_list)
      Some(x) => modify_friends_request(x, empty_address_list, friends_address)

  private stateful function only_one_friend_request(friends_address: address, new_friend_list: list(address)) : list(address) =
    put(state{requests[friends_address] = new_friend_list})
    new_friend_list

  private stateful function modify_friends_request(old_list: list(address), new_friend_list: list(address), friends_address: address) : list(address) =
    let new_list : list(address) = new_friend_list ++ old_list

    put(state{ requests[friends_address] = new_list })
    new_list

  public entrypoint get_friend_request() : list(user) =
    List.map((request) => Map.lookup_default(request, get_all_profile(), empty_profile()), Map.lookup_default(Call.caller, state.requests, []))

  public stateful entrypoint reject_friend_request(new_friends_address: address) : list(address) =
    let friend_request_list : list(address) = Map.lookup_default(Call.caller, state.requests, [])
    let new_friend_request_list : list(address) = List.filter((request) => request != new_friends_address, friend_request_list)
    
    put(state{ requests[Call.caller] = new_friend_request_list })
    new_friend_request_list

  public stateful entrypoint accept_friend_request(new_friends_address: address) : list(address) =
    let friend_request_list : list(address) = Map.lookup_default(Call.caller, state.requests, [])
    let new_friend_request_list : list(address) = List.filter((request) => request != new_friends_address, friend_request_list)

    let friends_list : list(address) = Map.lookup_default(Call.caller, state.friends, [])
    let request_senders_friend_list : list(address) = Map.lookup_default(new_friends_address, state.friends, [])

    let new_request_senders_friend_list : list(address) = Call.caller::request_senders_friend_list
    let new_friends_list : list(address) = new_friends_address::friends_list

    let new_friends_map : map(address, list(address)) = state.friends{ [Call.caller] = new_friends_list, [new_friends_address] = new_request_senders_friend_list }
    put(state{ friends = new_friends_map, requests[Call.caller] = new_friend_request_list })
    new_friend_request_list

  public entrypoint get_friends() : list(user) =
    List.map((friend) => Map.lookup_default(friend, get_all_profile(), empty_profile()), Map.lookup_default(Call.caller, state.friends, []))

  private function update_message_state(receiver: address, new_message: message) : map(address, map(address, list(message))) =
    let old_state_senders_messages : map(address, list(message)) = Map.lookup_default(Call.caller, state.messages, {})
    let old_state_receiver_messages : map(address, list(message)) = Map.lookup_default(receiver, state.messages, {})

    let old_single_receiver_messages : list(message) = Map.lookup_default(Call.caller, old_state_receiver_messages, [])
    let old_single_sender_messages : list(message) = Map.lookup_default(receiver, old_state_senders_messages, [])

    let new_single_receiver_messages : list(message) = new_message::old_single_receiver_messages
    let new_single_sender_messages : list(message) = new_message::old_single_sender_messages

    let new_state_senders_message : map(address, list(message)) = old_state_senders_messages{ [receiver] = new_single_sender_messages }
    let new_state_receivers_message : map(address, list(message)) = old_state_receiver_messages{ [Call.caller] = new_single_receiver_messages }

    let updated_message_state : map(address, map(address, list(message))) = state.messages{ [Call.caller] = new_state_senders_message, [receiver] = new_state_receivers_message }
    updated_message_state

  public stateful entrypoint send_message(receiver: address, content': string) : message =
    let new_message : message = { content = content', category = "message", amount = 0, time = Chain.timestamp, sender = Call.caller }
    let new_message_state = update_message_state(receiver, new_message)
    
    put(state{ messages = new_message_state })
    new_message

  private function get_user_balance() : int = Chain.balance(Call.caller)

  public payable stateful entrypoint send_fund(receiver: address, description': string) : message =
    require(get_user_balance() > Call.value, abort("Insufficient Funds"))

    let new_fund_message : message = { content = description', category = "fund", amount = Call.value, time = Chain.timestamp, sender = Call.caller }
    let new_message_state = update_message_state(receiver, new_fund_message)

    Chain.spend(receiver, Call.value)
    put(state{ messages = new_message_state })
    new_fund_message

  private function get_user_messages() : map(address, list(message)) =
    Map.lookup_default(Call.caller, state.messages, {})

  public entrypoint get_user_friend_messages(friend_address: address) : list(message) =
    Map.lookup_default(friend_address, get_user_messages(), [])